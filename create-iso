#!/usr/bin/env bash
#
# Copyright (c) 2017 Joyent Inc., All rights reserved.
# Copyright (c) 2017 Thomas Merkel
#

if [[ -n "$TRACE" ]]; then
  export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set -o xtrace
fi

set -euo pipefail
IFS=$'\n\t'

INSTALL_SH="install.sh"
TRITON_DIST_FILE="triton.tgz"

RELEASE=
MIRROR=
MIRROR_PATH=
ISO=
ISO_DIR=
ISO_MOUNT=
ISO_LAYOUT=
ISO_CHECKSUM=
ISO_FILENAME=



usage() {
cat <<EOF

Create a custom NetBSD ISO with the necessary packages and tooling installed
for deploying on SmartOS, Triton and the Joyent Public Cloud.

Usage:
  $0 -r <RELEASE> -m <MIRROR> -p <MIRROR_PATH> -i <ISO> -c <ISO_CHECKSUM> -d <ISO_DIR> -M <ISO_MOUNT> -l <ISO_LAYOUT> -f <ISO_FILENAME>

Example:
  $0 -r 7.1 -m cdn.netbsd.org -p /pub/NetBSD/iso -i NetBSD-7.1-amd64.iso -c SHA512 -d /data/netbsd-7.1-iso -M /mnt/netbsd-7.1-iso -l /data/netbsd-custom-7.1 -f netbsd-6.1-custom.iso

OPTIONS:
  -r The desired NetBSD release (e.g., 6.1)
  -m The mirror to use when downloading the release ISO. Do not include protocol (e.g., http://). Assumes http mirror
  -p The desired mirror path to the ISO (e.g., /pub/NetBSD)
  -i The ISO filename
  -c The name of the checksum file for the ISO
  -d The location to save the dowloaded ISO. Must be absolute path.
  -M The mount point for the downloaded ISO
  -l The directory location for saving a copy of the ISO layout. Must be absolute path.
  -f The name to use for the custom ISO
  -h Show this message

EOF
}

while getopts "hr:m:p:i:c:d:M:l:f:" OPTION
do
  case $OPTION in
    h)
      usage
      exit 1
      ;;
    r)
      RELEASE=${OPTARG}
      ;;
    m)
      MIRROR=${OPTARG%/}
      ;;
    p)
      MIRROR_PATH=${OPTARG%/}
      ;;
    i)
      ISO=${OPTARG}
      ;;
    c)
      ISO_CHECKSUM=${OPTARG}
      ;;
    d)
      ISO_DIR=${OPTARG%/}
      ;;
    M)
      ISO_MOUNT=${OPTARG%/}
      ;;
    l)
      ISO_LAYOUT=${OPTARG%/}
      ;;
    f)
      ISO_FILENAME="./${OPTARG}"
      ;;
    ?)
      usage
      exit
      ;;
  esac
done

if [[ "$#" -eq 0 ]]; then
  usage
  exit 1
fi

if [[ -z ${RELEASE} ]]; then
  echo "Error: missing release value (-r)"
  exit 1
fi

if [[ -z ${MIRROR} ]]; then
  echo "Error: missing mirror url (-m)"
  exit 1
fi

if [[ -z ${MIRROR_PATH} ]]; then
  echo "Error: missing mirror path (-p)"
  exit 1
fi

if [[ -z ${ISO} ]]; then
  echo "Error: missing ISO (-i) value"
  exit 1
fi

if [[ -z ${ISO} ]]; then
  echo "Error: missing ISO checksum (-c) value"
  exit 1
fi

if [[ -z ${ISO_DIR} ]]; then
  echo "Error: missing ISO directory (-d) value"
  exit 1
fi

if [[ -z ${ISO_MOUNT} ]]; then
  echo "Error: missing mount point directory (-M) value"
  exit 1
fi

if [[ -z ${ISO_LAYOUT} ]]; then
  echo "Error: missing DVD layout directory (-l) value"
  exit 1
fi

if [[ -z ${ISO_FILENAME} ]]; then
  echo "Error: missing custom ISO file name (-f) value"
  exit 1
fi

# Clean up ISO file if download is interrupted
trap 'rm -rf ${ISO_DIR}/${ISO}' SIGHUP SIGINT SIGTERM
# Delete Previous custom layout
trap 'rm -rf ${ISO_LAYOUT}' SIGHUP SIGINT SIGTERM

fetch_iso() {
  if [[ ! -d $ISO_DIR ]]; then
    mkdir -p $ISO_DIR
  fi

  echo "==> Fetching ${ISO_CHECKSUM}"
  curl -sS -o ${ISO_DIR}/${ISO_CHECKSUM} http://${MIRROR}${MIRROR_PATH}/${RELEASE}/${ISO_CHECKSUM}

  echo "==> Checking for local copy of $ISO..."
  if [[ -e $ISO_DIR/$ISO ]]; then
    echo "==> Found local copy of $ISO"

    echo "==> Verifying $ISO with ${ISO_CHECKSUM}"

    if [[ "$(digest sha512 $ISO_DIR/$ISO | cut -f2 -d= | tr -d '[:space:]')" == "$(grep "($ISO)" $ISO_DIR/${ISO_CHECKSUM} | cut -f2 -d= | tr -d '[:space:]')" ]]; then
        echo "==> Checksums match."
    else
        echo "==> Checksums don't match!"
        exit 1
    fi

  else
      echo "==> Local copy not found."
      echo "==> Fetching ISO from $MIRROR..."
      curl -sS -o ${ISO_DIR}/${ISO} http://${MIRROR}${MIRROR_PATH}/${RELEASE}/${ISO}
      echo "==> Done!"
      echo "==> ${ISO} saved to $ISO_DIR/"

      echo "==> Verifying $ISO with ${ISO_CHECKSUM}"

      if [[ "$(digest sha512 $ISO_DIR/$ISO | cut -f2 -d= | tr -d '[:space:]')" == "$(grep "($ISO)" $ISO_DIR/${ISO_CHECKSUM} | cut -f2 -d= | tr -d '[:space:]')" ]]; then
          echo "==> Checksums match."
      else
          echo "==> Checksums don't match!"
          exit 1
      fi
  fi
}

create_layout() {
  echo "==> Creating custom ISO Layout"
  if [[ -d $ISO_LAYOUT ]]; then
      echo "==> Previous layout $ISO_LAYOUT exists...deleting"
      rm -rf $ISO_LAYOUT
  fi
  echo "==> Creating $ISO_LAYOUT"
  mkdir -p $ISO_LAYOUT

  if [[ ! -d $ISO_MOUNT ]]; then
      echo "==> Creating $ISO_MOUNT ..."
      mkdir -p $ISO_MOUNT
  fi

  if df | grep -q $ISO_MOUNT; then
    echo "==> Unmounting previous $ISO_MOUNT..."
    umount $ISO_MOUNT
    vnconfig -u vnd0
  fi

  echo "==> Mounting $ISO to $ISO_MOUNT"
  vnconfig vnd0 $ISO_DIR/$ISO
  mount_cd9660 /dev/vnd0d $ISO_MOUNT

  echo "==> Copying layout from $ISO_MOUNT to $ISO_LAYOUT"
  rsync -aq $ISO_MOUNT/ $ISO_LAYOUT

  echo "==> Copying and integrating Triton guesttools:"

  # Cleanup previous distribution file
  [[ -f $TRITON_DIST_FILE ]] && rm $TRITON_DIST_FILE

  ( cd triton-netbsd-guesttools
    tar -czpf ../${TRITON_DIST_FILE} ./etc ./lib ./usr
  )

  cp $TRITON_DIST_FILE ${ISO_LAYOUT}/amd64/binary/sets/${TRITON_DIST_FILE}

  echo "==> Generating digest for $TRITON_DIST_FILE"
  ( cd ${ISO_LAYOUT}/amd64/binary/sets
    digest SHA512 ${TRITON_DIST_FILE} >> SHA512
    digest MD5 ${TRITON_DIST_FILE} >> MD5
  )

  echo "==> Copying $INSTALL_SH to $ISO_LAYOUT"
  cp $INSTALL_SH $ISO_LAYOUT/
  chmod 700 $ISO_LAYOUT/$INSTALL_SH

  echo "/${INSTALL_SH}" >> ${ISO_LAYOUT}/etc/rc.local

  echo "==> Get network up automatically in the blank VM"
  echo "ifconfig_wm0=\"dhcp\"" >> $ISO_LAYOUT/etc/rc.conf
  echo "ifconfig_wm0=\"dhcp\"" >> $ISO_LAYOUT/etc/rc.conf

  echo "==> Set resolvers in the blank VM"
  echo "nameserver 8.8.8.8" >> $ISO_LAYOUT/etc/resolv.conf
  echo "nameserver 8.8.4.4" >> $ISO_LAYOUT/etc/resolv.conf

  echo "==> Download src/sys for bootcd"
  ( mkdir -p /usr/src
    cd /usr/src
    curl -sS -o sys.tar.gz http://cdn.netbsd.org/pub/NetBSD/NetBSD-release-7/tar_files/src/sys.tar.gz
    tar -xzf sys.tar.gz -C /usr/
  )
  echo "==> Create bootxx_cd9660"
  ( cd /usr/src/sys/arch/i386/stand/cdboot/
    make
    cp bootxx_cd9660 $ISO_LAYOUT/bootxx_cd9660
  )

  echo "==> Unmounting $ISO_MOUNT"
  umount $ISO_MOUNT
  vnconfig -u vnd0
}

create_newiso() {
  echo "==> Getting Volume ID for ${ISO}"
  CUSTOM_ISO_TITLE=$(isoinfo -d -i ${ISO_DIR}/${ISO} | grep "Volume id" | awk '{print $3}')
  echo "==> Volume ID is $CUSTOM_ISO_TITLE"

  echo "==> Preparing NEW ISO"
  mkisofs -J -R -no-emul-boot \
    -V "$CUSTOM_ISO_TITLE" \
    -p "Joyent" -b bootxx_cd9660\
    -o $ISO_FILENAME $ISO_LAYOUT
  echo "==> Custom ISO now ready: $ISO_FILENAME"
}

echo "==> ISO Build Starting!"
fetch_iso
create_layout
create_newiso
